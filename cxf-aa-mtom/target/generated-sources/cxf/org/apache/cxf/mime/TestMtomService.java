
/*
 * 
 */

package org.apache.cxf.mime;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.1-SNAPSHOT
 * Thu Apr 23 16:20:40 CST 2009
 * Generated source version: 2.2.1-SNAPSHOT
 * 
 */


@WebServiceClient(name = "TestMtomService", 
                  wsdlLocation = "file:/D:/cxf/apache-cxf-2.2/samples/mtom/wsdl/mtom_xop.wsdl",
                  targetNamespace = "http://cxf.apache.org/mime") 
public class TestMtomService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://cxf.apache.org/mime", "TestMtomService");
    public final static QName TestMtomPort = new QName("http://cxf.apache.org/mime", "TestMtomPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/D:/cxf/apache-cxf-2.2/samples/mtom/wsdl/mtom_xop.wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from file:/D:/cxf/apache-cxf-2.2/samples/mtom/wsdl/mtom_xop.wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public TestMtomService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TestMtomService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TestMtomService() {
        super(WSDL_LOCATION, SERVICE);
    }

    /**
     * 
     * @return
     *     returns TestMtomPortType
     */
    @WebEndpoint(name = "TestMtomPort")
    public TestMtomPortType getTestMtomPort() {
        return super.getPort(TestMtomPort, TestMtomPortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestMtomPortType
     */
    @WebEndpoint(name = "TestMtomPort")
    public TestMtomPortType getTestMtomPort(WebServiceFeature... features) {
        return super.getPort(TestMtomPort, TestMtomPortType.class, features);
    }

}
